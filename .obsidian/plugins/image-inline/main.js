/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageToBase64Plugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  convertOnPaste: false,
  appendNewLineAfterPaste: false
};
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
var ImageToBase64Plugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ImageToBase64SettingTab(this.app, this));
    this.addCommand({
      id: "toggle-convert-on-paste",
      name: "Enable/disable convert to base64 on paste",
      callback: () => {
        this.settings.convertOnPaste = !this.settings.convertOnPaste;
        this.saveSettings();
        new import_obsidian.Notice(`Convert on paste is now ${this.settings.convertOnPaste ? "enabled" : "disabled"}`);
      }
    });
    this.addCommand({
      id: "paste-image-as-base64",
      name: "Paste image as Base64",
      editorCallback: async (editor) => {
        navigator.clipboard.read().then(async (items) => {
          for (const clipboardItem of items) {
            for (const type of clipboardItem.types) {
              if (!(type.indexOf("image") === 0)) {
                continue;
              }
              const blob = await clipboardItem.getType(type);
              const arrayBuffer = await new Response(blob).arrayBuffer();
              const base64 = arrayBufferToBase64(arrayBuffer);
              const cursor = editor.getCursor();
              const imgMarkdown = `![](data:image/jpeg;base64,${base64})
`;
              editor.replaceRange(imgMarkdown, cursor);
              const newCursorPos = {
                line: cursor.line,
                ch: imgMarkdown.length
              };
              editor.setCursor(newCursorPos);
            }
          }
        }).catch((err) => {
          console.error("Failed to read clipboard contents: ", err);
          new import_obsidian.Notice("Error accessing clipboard.");
        });
      }
    });
    this.registerEvent(this.app.workspace.on("editor-paste", async (evt, editor) => {
      if (this.settings.convertOnPaste && evt.clipboardData) {
        const items = Array.from(evt.clipboardData.items);
        for (const item of items) {
          if (item.type.startsWith("image")) {
            evt.preventDefault();
            const file = item.getAsFile();
            if (file) {
              try {
                const base64String = arrayBufferToBase64(await (0, import_obsidian.getBlobArrayBuffer)(file));
                editor.replaceSelection(`![](data:image/png;base64,${base64String})${this.settings.appendNewLineAfterPaste ? "\n" : ""}`);
                console.log("Pasted image converted to base64!");
              } catch (error) {
                console.error("Error converting image to base64:", error);
              }
              break;
            }
          }
        }
      }
    }));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ImageToBase64SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Convert images on paste").setDesc("Automatically convert pasted images to base64 strings.").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertOnPaste).onChange(async (value) => {
      this.plugin.settings.convertOnPaste = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Append new line after paste").setDesc("Prevent immediate expansion of base64 link by appending a new line after the image is pasted.").addToggle((toggle) => toggle.setValue(this.plugin.settings.appendNewLineAfterPaste).onChange(async (value) => {
      this.plugin.settings.appendNewLineAfterPaste = value;
      await this.plugin.saveSettings();
    }));
  }
};
